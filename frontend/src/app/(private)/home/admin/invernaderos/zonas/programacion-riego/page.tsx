"use client";

import React, { useEffect, useState, useRef, JSX } from "react";
import Link from "next/link";
import { useSearchParams } from "next/navigation"; 
// ðŸš¨ CAMBIA ESTA RUTA POR LA RUTA REAL A TU ARCHIVO app.ts (o donde tengas tu cliente 'api')
import api from "@/app/services/api"; 
import {
Â  LineChart,
Â  Line,
Â  XAxis,
Â  YAxis,
Â  CartesianGrid,
Â  Tooltip,
Â  Legend,
Â  ResponsiveContainer,
} from "recharts";
import io from "socket.io-client";

import {
Â  Plus,
Â  MoreVertical,
Â  Pencil,
Â  Trash2,
Â  X,
Â  CheckCircle2,
Â  XCircle,
Â  AlertTriangle,
Â  Loader2,
Â  Check,
Â  CircleDot,
Â  Wrench,
Â  ArrowLeft,
Â  Droplets,
Â  Sun,
Â  Sprout,
Â  Info
} from "lucide-react";

// ðŸš¨ URL del Backend Desplegado para Socket.io
const SOCKET_URL = process.env.NEXT_PUBLIC_BACKEND_URL?.replace('/api', '') || 'http://localhost:4000';

// --- Interfaces ---
interface Zona {
Â  id_zona: number;
Â  nombre: string;
Â  descripciones_add: string;
Â  estado: "activo" | "inactivo" | "mantenimiento";
Â  id_cultivo?: string | null;
}

interface Cultivo {
Â  id_cultivo: number;
Â  nombre_cultivo: string;
}

interface HumedadLectura {
Â  actual: number;
Â  min: number;
Â  max: number;
Â  timestamp: string;
}

const formInicial = { nombre: "", descripciones_add: "", id_cultivo: "" };

// --- Modales ---
const ConfirmModal = ({ title, message, onConfirm, onCancel, confirmText = "Confirmar", variant = "default" }: any) => (
Â  <div className="fixed inset-0 bg-slate-900/40 backdrop-blur-sm flex items-center justify-center z-50 p-4">
Â  Â  <div className="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md text-center">
Â  Â  Â  {variant === 'danger' ? <AlertTriangle className="w-16 h-16 mx-auto text-red-500 mb-4" /> : <Info className="w-16 h-16 mx-auto text-amber-500 mb-4" />}
Â  Â  Â  <h3 className="text-xl font-bold text-slate-800 mb-2">{title}</h3>
Â  Â  Â  <p className="text-slate-500 mb-8" dangerouslySetInnerHTML={{ __html: message }}></p>
Â  Â  Â  <div className="flex justify-center gap-4">
Â  Â  Â  Â  <button onClick={onCancel} className="px-6 py-2 rounded-lg border border-slate-300 text-slate-700 font-semibold hover:bg-slate-100 transition-colors">Cancelar</button>
Â  Â  Â  Â  <button onClick={onConfirm} className={`px-6 py-2 rounded-lg text-white font-semibold transition-colors ${variant === 'danger' ? 'bg-red-600 hover:bg-red-700' : 'bg-teal-600 hover:bg-teal-700'}`}>{confirmText}</button>
Â  Â  Â  </div>
Â  Â  </div>
Â  </div>
);

const MessageModal = ({ title, message, onCerrar, success = true }: any) => (
Â  <div className="fixed inset-0 bg-slate-900/40 backdrop-blur-sm flex items-center justify-center z-50 p-4">
Â  Â  <div className="bg-white p-8 rounded-2xl shadow-xl w-full max-w-md text-center">
Â  Â  Â  {success ? <CheckCircle2 className="w-16 h-16 mx-auto text-teal-500 mb-4" /> : <XCircle className="w-16 h-16 mx-auto text-red-500 mb-4" />}
Â  Â  Â  <h3 className="text-xl font-bold text-slate-800 mb-4">{title}</h3>
Â  Â  Â  <p className="text-slate-500 mb-8">{message}</p>
Â  Â  Â  <button onClick={onCerrar} className="w-full px-6 py-2 rounded-lg bg-teal-600 text-white font-semibold hover:bg-teal-700 transition-colors">Entendido</button>
Â  Â  </div>
Â  </div>
);

// --- GrÃ¡fica ---
const ZonaChart = ({ lecturas }: { lecturas: HumedadLectura[] }) => {
Â  if (!lecturas || lecturas.length === 0) return <p className="text-sm text-slate-400">No hay datos disponibles</p>;

Â  const data = lecturas.map(l => ({
Â  Â  name: new Date(l.timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
Â  Â  Actual: l.actual,
Â  Â  Min: l.min,
Â  Â  Max: l.max,
Â  }));

Â  return (
Â  Â  <div className="mt-4">
Â  Â  Â  <h4 className="text-xs font-semibold text-slate-500 mb-2">Humedad Reciente: {lecturas[lecturas.length - 1]?.actual ?? 0} % </h4>
Â  Â  Â  <ResponsiveContainer width="100%" height={160}>
Â  Â  Â  Â  <LineChart data={data} margin={{ top: 5, right: 10, left: -25, bottom: 5 }}>
Â  Â  Â  Â  Â  <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" />
Â  Â  Â  Â  Â  <XAxis dataKey="name" tick={{ fill: '#64748b', fontSize: 12 }} />
Â  Â  Â  Â  Â  <YAxis tick={{ fill: '#64748b', fontSize: 12 }} domain={[0, 100]} />
Â  Â  Â  Â  Â  <Tooltip contentStyle={{ backgroundColor: 'white', border: '1px solid #e2e8f0', borderRadius: '0.5rem', fontSize: '13px' }}/>
Â  Â  Â  Â  Â  <Legend wrapperStyle={{ fontSize: "13px" }}/>
Â  Â  Â  Â  Â  <Line type="monotone" dataKey="Max" stroke="#a7f3d0" strokeWidth={2} dot={false} />
Â  Â  Â  Â  Â  <Line type="monotone" dataKey="Min" stroke="#d1fae5" strokeWidth={2} dot={false} />
Â  Â  Â  Â  Â  <Line type="monotone" dataKey="Actual" stroke="#14b8a6" strokeWidth={3} dot={{ r: 2 }} />
Â  Â  Â  Â  </LineChart>
Â  Â  Â  </ResponsiveContainer>
Â  Â  </div>
Â  );
};

// --- PÃ¡gina Cliente: ZonasContent ---
export function ZonasContent() {
Â  const searchParams = useSearchParams();
Â  const id_invernadero = searchParams.get("id_invernadero"); 

Â  const [zonas, setZonas] = useState<Zona[]>([]);
Â  const [cultivosDisponibles, setCultivosDisponibles] = useState<Cultivo[]>([]);
Â  const [form, setForm] = useState(formInicial);

Â  const [cargando, setCargando] = useState(true);
Â  const [guardando, setGuardando] = useState(false);

Â  const [modalOpen, setModalOpen] = useState(false);
Â  const [editando, setEditando] = useState<Zona | null>(null);
Â  const [menuOpenId, setMenuOpenId] = useState<number | null>(null);

Â  const [modalConfirm, setModalConfirm] = useState<any>({ show: false, onConfirm: () => {}, title: '', message: '', confirmText: 'Confirmar', variant: 'default' });
Â  const [modalMessage, setModalMessage] = useState<any>({ show: false, title: '', message: '', success: true });

Â  const [lecturas, setLecturas] = useState<{ [key: number]: HumedadLectura[] }>({});

Â  const menuRef = useRef<HTMLDivElement>(null);

Â  useEffect(() => {
Â  Â  const fetchData = async () => {
Â  Â  Â  if (!id_invernadero) return;
Â  Â  Â  setCargando(true);
Â  Â  Â  try {
Â  Â  Â  Â  const [zonasRes, cultivosRes] = await Promise.all([
Â  Â  Â  Â  Â  // ðŸ’¡ CORRECCIÃ“N: Usar 'api' y ruta relativa.
Â  Â  Â  Â  Â  api.get(`/zona/invernadero/${id_invernadero}`), 
Â  Â  Â  Â  Â  api.get("/cultivos")
Â  Â  Â  Â  ]);
Â  Â  Â  Â  setZonas(zonasRes.data);
Â  Â  Â  Â  setCultivosDisponibles(cultivosRes.data);
Â  Â  Â  } catch (error) {
Â  Â  Â  Â  console.error("Error al cargar datos:", error);
Â  Â  Â  Â  setModalMessage({ show: true, success: false, title: "Error de Carga", message: "No se pudieron obtener los datos de las zonas o cultivos." });
Â  Â  Â  } finally {
Â  Â  Â  Â  setCargando(false);
Â  Â  Â  }
Â  Â  };
Â  Â  fetchData();
Â  }, [id_invernadero]);

Â  // --- Socket.io ---
Â  useEffect(() => {
Â  Â  // ðŸ’¡ CORRECCIÃ“N: Usar la URL desplegada (sin /api)
Â  Â  const socket = io(SOCKET_URL); 
Â  Â  socket.on("nuevaLectura", (data: any) => {
Â  Â  Â  console.log("Lectura recibida:", data);
Â  Â  Â  if (data.tipo_sensor === "humedad" && data.id_zona) {
Â  Â  Â  Â  setLecturas(prev => {
Â  Â  Â  Â  Â  const zonaLecturas = prev[data.id_zona] ? [...prev[data.id_zona]] : [];
Â  Â  Â  Â  Â  zonaLecturas.push({ actual: data.valor, min: data.min ?? 40, max: data.max ?? 70, timestamp: data.timestamp });
Â  Â  Â  Â  Â  if (zonaLecturas.length > 20) zonaLecturas.shift();
Â  Â  Â  Â  Â  return { ...prev, [data.id_zona]: zonaLecturas };
Â  Â  Â  Â  });
Â  Â  Â  }
Â  Â  });
Â  Â  return () => { socket.disconnect(); };
Â  }, []);

Â  useEffect(() => {
Â  Â  const handleClickOutside = (event: MouseEvent) => {
Â  Â  Â  if (menuRef.current && !menuRef.current.contains(event.target as Node)) {
Â  Â  Â  Â  setMenuOpenId(null);
Â  Â  Â  }
Â  Â  };
Â  Â  document.addEventListener("mousedown", handleClickOutside);
Â  Â  return () => document.removeEventListener("mousedown", handleClickOutside);
Â  }, []);

Â  const abrirModal = (zona: Zona | null = null) => {
Â  Â  if (zona) {
Â  Â  Â  setEditando(zona);
Â  Â  Â  setForm({
Â  Â  Â  Â  nombre: zona.nombre,
Â  Â  Â  Â  descripciones_add: zona.descripciones_add,
Â  Â  Â  Â  id_cultivo: zona.id_cultivo != null ? String(zona.id_cultivo) : "",
Â  Â  Â  });
Â  Â  } else {
Â  Â  Â  setEditando(null);
Â  Â  Â  setForm(formInicial);
Â  Â  }
Â  Â  setModalOpen(true);
Â  };

Â  const handleFormSubmit = async () => {
Â  Â  if (!form.nombre.trim() || !form.descripciones_add.trim()) {
Â  Â  Â  setModalMessage({ show: true, success: false, title: "Campos Incompletos", message: "El nombre y la descripciÃ³n son obligatorios." });
Â  Â  Â  return;
Â  Â  }
Â  Â  setGuardando(true);

Â  Â  const payload = {
Â  Â  Â  nombre: form.nombre.trim(),
Â  Â  Â  descripciones_add: form.descripciones_add.trim(),
Â  Â  Â  id_cultivo: form.id_cultivo ? Number(form.id_cultivo) : null,
Â  Â  Â  id_invernadero: Number(id_invernadero),
Â  Â  Â  estado: editando ? editando.estado : "activo",
Â  Â  };

Â  Â  try {
Â  Â  Â  let res;
Â  Â  Â  if (editando) {
Â  Â  Â  Â  // ðŸ’¡ CORRECCIÃ“N: Usar 'api' y ruta relativa.
Â  Â  Â  Â  res = await api.put(`/zona/${editando.id_zona}`, payload);
Â  Â  Â  Â  const updatedZona = res.data?.zona ?? res.data;
Â  Â  Â  Â  // La API puede devolver id_cultivo como null, lo manejamos.
Â  Â  Â  Â  const idCultivoFinal = updatedZona?.id_cultivo === undefined ? payload.id_cultivo : updatedZona.id_cultivo;
Â  Â  Â  Â  setZonas(prev => prev.map(z => z.id_zona === editando.id_zona ? { ...z, ...updatedZona, id_cultivo: idCultivoFinal } : z));
Â  Â  Â  } else {
Â  Â  Â  Â  // ðŸ’¡ CORRECCIÃ“N: Usar 'api' y ruta relativa.
Â  Â  Â  Â  res = await api.post("/zona", payload);
Â  Â  Â  Â  const newZona = res.data?.zona ?? res.data;
Â  Â  Â  Â  if (newZona && newZona.id_cultivo === undefined) newZona.id_cultivo = payload.id_cultivo ?? null;
Â  Â  Â  Â  setZonas(prev => [...prev, newZona]);
Â  Â  Â  }

Â  Â  Â  setModalOpen(false);
Â  Â  Â  setModalMessage({ show: true, success: true, title: "OperaciÃ³n Exitosa", message: `La zona "${payload.nombre}" se ha guardado correctamente.`});
Â  Â  } catch (error: any) {
Â  Â  Â  console.error("Error guardando zona:", error);
Â  Â  Â  setModalMessage({ show: true, success: false, title: "Error al Guardar", message: error.response?.data?.error || "OcurriÃ³ un error inesperado."});
Â  Â  } finally {
Â  Â  Â  setGuardando(false);
Â  Â  }
Â  };

Â  const cambiarEstado = (zona: Zona, nuevoEstado: string) => {
Â  Â  setModalConfirm({
Â  Â  Â  show: true,
Â  Â  Â  title: `Cambiar Estado`,
Â  Â  Â  message: `Â¿Seguro que quieres cambiar el estado de la zona <strong>${zona.nombre}</strong> a <strong>${nuevoEstado}</strong>?`,
Â  Â  Â  confirmText: 'Confirmar',
Â  Â  Â  variant: 'default',
Â  Â  Â  onConfirm: async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // Mapeo simple de estado a ruta de API
Â  Â  Â  Â  Â  const ruta = {"activo": "activar", "inactivo": "inactivar", "mantenimiento": "mantenimiento"}[nuevoEstado];
Â  Â  Â  Â  Â  // ðŸ’¡ CORRECCIÃ“N: Usar 'api' y ruta relativa.
Â  Â  Â  Â  Â  await api.patch(`/zona/${ruta}/${zona.id_zona}`);
Â  Â  Â  Â  Â  setZonas(zonas.map(z => z.id_zona === zona.id_zona ? {...z, estado: nuevoEstado as any} : z));
Â  Â  Â  Â  Â  setModalMessage({ show: true, success: true, title: "Estado Actualizado", message: `El estado de la zona ha sido actualizado a ${nuevoEstado}.` });
Â  Â  Â  Â  } catch (error: any) {
Â  Â  Â  Â  Â  setModalMessage({ show: true, success: false, title: "Error", message: error.response?.data?.error || "No se pudo cambiar el estado." });
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  setModalConfirm({ ...modalConfirm, show: false });
Â  Â  Â  Â  Â  setMenuOpenId(null);
Â  Â  Â  Â  }
Â  Â  Â  },
Â  Â  Â  onCancel: () => setModalConfirm({ ...modalConfirm, show: false })
Â  Â  });
Â  };

Â  const eliminarZona = (zona: Zona) => {
Â  Â  if (zona.estado !== 'inactivo') {
Â  Â  Â  setModalMessage({ show: true, success: false, title: "AcciÃ³n no permitida", message: `Solo se pueden eliminar zonas con estado "Inactivo". El estado actual es "${zona.estado}".` });
Â  Â  Â  setMenuOpenId(null);
Â  Â  Â  return;
Â  Â  }
Â  Â  setModalConfirm({
Â  Â  Â  show: true,
Â  Â  Â  title: "Eliminar Zona",
Â  Â  Â  message: `Esta acciÃ³n es permanente y no se puede deshacer. Â¿Seguro que quieres eliminar la zona <strong>${zona.nombre}</strong>?`,
Â  Â  Â  confirmText: "Eliminar",
Â  Â  Â  variant: 'danger',
Â  Â  Â  onConfirm: async () => {
Â  Â  Â  Â  try {
Â  Â  Â  Â  Â  // ðŸ’¡ CORRECCIÃ“N: Usar 'api' y ruta relativa.
Â  Â  Â  Â  Â  await api.delete(`/zona/${zona.id_zona}`);
Â  Â  Â  Â  Â  setZonas(zonas.filter(z => z.id_zona !== zona.id_zona));
Â  Â  Â  Â  Â  setModalMessage({ show: true, success: true, title: "Zona Eliminada", message: "La zona ha sido eliminada correctamente." });
Â  Â  Â  Â  } catch (error: any) {
Â  Â  Â  Â  Â  setModalMessage({ show: true, success: false, title: "Error al Eliminar", message: error.response?.data?.error || "OcurriÃ³ un error." });
Â  Â  Â  Â  } finally {
Â  Â  Â  Â  Â  setModalConfirm({ ...modalConfirm, show: false });
Â  Â  Â  Â  Â  setMenuOpenId(null);
Â  Â  Â  Â  }
Â  Â  Â  },
Â  Â  Â  onCancel: () => setModalConfirm({ ...modalConfirm, show: false })
Â  Â  });
Â  };

Â  const StatusBadge = ({ estado }: { estado: string }) => {
Â  Â  const config: Record<string, { text: string, color: string, icon: JSX.Element }> = {
Â  Â  Â  activo: { text: "Activo", color: "bg-green-100 text-green-800", icon: <CheckCircle2 className="w-3 h-3" /> },
Â  Â  Â  inactivo: { text: "Inactivo", color: "bg-slate-100 text-slate-600", icon: <XCircle className="w-3 h-3" /> },
Â  Â  Â  mantenimiento: { text: "Mantenimiento", color: "bg-amber-100 text-amber-800", icon: <Wrench className="w-3 h-3" /> },
Â  Â  };
Â  Â  const current = config[estado] || config.inactivo;
Â  Â  return <span className={`inline-flex items-center gap-1.5 text-xs font-semibold px-2.5 py-1 rounded-full ${current.color}`}>{current.icon}{current.text}</span>;
Â  };

Â  return (
Â  Â  <main className="w-full bg-slate-50 min-h-screen p-6 sm:p-8">
Â  Â  Â  <div className="flex flex-wrap justify-between items-center gap-4 mb-8">
Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  <Link href="/home/admin/invernaderos" className="text-sm text-slate-500 hover:text-slate-700 flex items-center gap-1 mb-2">
Â  Â  Â  Â  Â  Â  <ArrowLeft className="w-4 h-4"/> Volver a Invernaderos
Â  Â  Â  Â  Â  </Link>
Â  Â  Â  Â  Â  <h1 className="text-4xl font-extrabold text-slate-800 tracking-tight">Zonas del Invernadero #{id_invernadero}</h1>
Â  Â  Â  Â  Â  <p className="text-lg text-slate-500 mt-1">
Â  Â  Â  Â  Â  Â  {zonas.length} Zonas Totales | {zonas.filter(z => z.estado === 'activo').length} Zonas Activas
Â  Â  Â  Â  Â  </p>
Â  Â  Â  Â  </div>
Â  Â  Â  Â  <button onClick={() => abrirModal()} className="bg-teal-600 text-white font-semibold px-4 py-2 rounded-lg hover:bg-teal-700 transition-colors flex items-center gap-2">
Â  Â  Â  Â  Â  <Plus className="w-5 h-5" />
Â  Â  Â  Â  Â  <span>Nueva Zona</span>
Â  Â  Â  Â  </button>
Â  Â  Â  </div>

Â  Â  Â  {cargando ? (
Â  Â  Â  Â  <div className="text-center py-20"><Loader2 className="w-12 h-12 mx-auto text-teal-600 animate-spin" /><p className="mt-4 text-slate-500">Cargando zonas...</p></div>
Â  Â  Â  ) : (
Â  Â  Â  Â  <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
Â  Â  Â  Â  Â  {zonas.map((zona) => (
Â  Â  Â  Â  Â  Â  <div key={zona.id_zona} className="bg-white rounded-2xl shadow-sm border border-slate-200 flex flex-col overflow-hidden">
Â  Â  Â  Â  Â  Â  Â  <div className="p-5">
Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="flex justify-between items-start mb-2">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <h2 className="text-xl font-bold text-slate-800">{zona.nombre}</h2>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div ref={menuOpenId === zona.id_zona ? menuRef : null} className="relative">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => setMenuOpenId(prev => prev === zona.id_zona ? null : zona.id_zona)} className="p-2 text-slate-500 hover:bg-slate-100 rounded-full"><MoreVertical className="w-5 h-5" /></button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {menuOpenId === zona.id_zona && (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="absolute right-0 top-full mt-2 w-48 bg-white border border-slate-200 shadow-lg rounded-lg z-10 overflow-hidden">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => abrirModal(zona)} className="w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 flex items-center gap-2"><Pencil className="w-4 h-4"/> Editar</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => cambiarEstado(zona, "activo")} className="w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 flex items-center gap-2"><Check className="w-4 h-4 text-green-500"/> Activar</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => cambiarEstado(zona, "inactivo")} className="w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 flex items-center gap-2"><CircleDot className="w-4 h-4 text-slate-500"/> Inactivar</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => cambiarEstado(zona, "mantenimiento")} className="w-full text-left px-4 py-2 text-sm text-slate-700 hover:bg-slate-50 flex items-center gap-2"><Wrench className="w-4 h-4 text-amber-500"/> Mantenimiento</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <button onClick={() => eliminarZona(zona)} className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center gap-2"><Trash2 className="w-4 h-4"/> Eliminar</button>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  )}
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â <p className="text-sm text-slate-500 mb-4 h-10 line-clamp-2">{zona.descripciones_add}</p>
Â  Â  Â  Â  Â  Â  Â  Â  Â <div className="text-sm space-y-2 mb-4">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2 text-slate-600"><Sprout className="w-4 h-4"/><span>Cultivo: <span className="font-semibold">{cultivosDisponibles.find(c => c.id_cultivo === Number(zona.id_cultivo))?.nombre_cultivo || 'No asignado'}</span></span></div>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <div className="flex items-center gap-2"><StatusBadge estado={zona.estado} /></div>
Â  Â  Â  Â  Â  Â  Â  Â  Â </div>
Â  Â  Â  Â  Â  Â  Â  Â  Â <ZonaChart lecturas={lecturas[zona.id_zona] || []} />
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  Â  <div className="mt-auto border-t border-slate-200 bg-slate-50 p-4 grid grid-cols-2 gap-3">
Â  Â  Â  Â  Â  Â  Â  Â  Â <Link 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  href={`/home/admin/invernaderos/zonas/programacion-riego?id=${zona.id_zona}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-center font-semibold bg-blue-100 text-blue-800 flex items-center justify-center gap-2 py-2 rounded-lg hover:bg-blue-200 transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  Â >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Droplets className="w-4 h-4"/>Riego
Â  Â  Â  Â  Â  Â  Â  Â  Â </Link>
Â  Â  Â  Â  Â  Â  Â  Â  Â <Link 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  href={`/home/admin/invernaderos/zonas/programacion-iluminacion?id=${zona.id_zona}`} 
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  className="text-center font-semibold bg-amber-100 text-amber-800 flex items-center justify-center gap-2 py-2 rounded-lg hover:bg-amber-200 transition-colors"
Â  Â  Â  Â  Â  Â  Â  Â  Â >
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <Sun className="w-4 h-4"/>IluminaciÃ³n
Â  Â  Â  Â  Â  Â  Â  Â  Â </Link>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  </div>
Â  Â  Â  )}
Â  Â  Â  
Â  Â  Â  {modalOpen && (
Â  Â  Â  Â  <div className="fixed inset-0 bg-slate-900/60 backdrop-blur-sm z-40 flex items-center justify-center p-4">
Â  Â  Â  Â  Â  <div className="bg-white rounded-2xl shadow-2xl w-full max-w-lg relative max-h-[90vh] flex flex-col">
Â  Â  Â  Â  Â  Â  <div className="p-6 border-b border-slate-200">
Â  Â  Â  Â  Â  Â  Â  <h2 className="text-2xl font-bold text-slate-800">{editando ? "Editar" : "Nueva"} Zona</h2>
Â  Â  Â  Â  Â  Â  Â  <button onClick={() => setModalOpen(false)} className="absolute top-4 right-4 p-2 text-slate-500 hover:bg-slate-100 rounded-full"><X/></button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="p-6 space-y-4 overflow-y-auto">
Â  Â  Â  Â  Â  Â  Â  <input placeholder="Nombre de la zona" value={form.nombre} onChange={(e) => setForm({ ...form, nombre: e.target.value })} className="w-full border border-slate-300 p-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500" />
Â  Â  Â  Â  Â  Â  Â  <textarea placeholder="DescripciÃ³n adicional" value={form.descripciones_add} onChange={(e) => setForm({ ...form, descripciones_add: e.target.value })} className="w-full border border-slate-300 p-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500" rows={3}/>
Â  Â  Â  Â  Â  Â  Â  <div>
Â  Â  Â  Â  Â  Â  Â  Â  <label className="block text-sm font-semibold text-slate-700 mb-2">Asignar Cultivo (Opcional)</label>
Â  Â  Â  Â  Â  Â  Â  Â  Â  <select value={form.id_cultivo} onChange={(e) => setForm({ ...form, id_cultivo: e.target.value })} className="w-full border border-slate-300 p-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-teal-500 bg-white">
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option value="">-- Sin cultivo asignado --</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  {cultivosDisponibles.map((cultivo) => (
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  <option key={cultivo.id_cultivo} value={cultivo.id_cultivo}>{cultivo.nombre_cultivo}</option>
Â  Â  Â  Â  Â  Â  Â  Â  Â  Â  ))}
Â  Â  Â  Â  Â  Â  Â  Â  Â  </select>
Â  Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  Â  <div className="p-6 border-t border-slate-200 bg-slate-50 rounded-b-2xl flex justify-end gap-3">
Â  Â  Â  Â  Â  Â  Â  <button onClick={() => setModalOpen(false)} className="px-6 py-2 rounded-lg border border-slate-300 text-slate-700 font-semibold hover:bg-slate-100 transition-colors">Cancelar</button>
Â  Â  Â  Â  Â  Â  Â  <button onClick={handleFormSubmit} disabled={guardando} className="px-6 py-2 rounded-lg bg-teal-600 text-white font-semibold hover:bg-teal-700 transition-colors flex items-center justify-center gap-2 disabled:bg-teal-400">
Â  Â  Â  Â  Â  Â  Â  Â  {guardando ? <><Loader2 className="w-5 h-5 animate-spin"/> Guardando...</> : editando ? "Guardar Cambios" : "Crear Zona"}
Â  Â  Â  Â  Â  Â  Â  </button>
Â  Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  Â  </div>
Â  Â  Â  Â  </div>
Â  Â  Â  )}

Â  Â  Â  {modalConfirm.show && <ConfirmModal title={modalConfirm.title} message={modalConfirm.message} onConfirm={modalConfirm.onConfirm} onCancel={() => setModalConfirm({ ...modalConfirm, show: false })} confirmText={modalConfirm.confirmText} variant={modalConfirm.variant}/>}
Â  Â  Â  {modalMessage.show && <MessageModal title={modalMessage.title} message={modalMessage.message} success={modalMessage.success} onCerrar={() => setModalMessage({ ...modalMessage, show: false })} />}
Â  Â  </main>
Â  );
}